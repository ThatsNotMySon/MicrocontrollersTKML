
B4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000196  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a9e  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ac  00000000  00000000  00000d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f7  00000000  00000000  0000161a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044f  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000164  00000000  00000000  00001f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002067  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e9       	ldi	r30, 0x96	; 150
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	62 d0       	rcall	.+196    	; 0x178 <main>
  b4:	6e c0       	rjmp	.+220    	; 0x192 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
}

void set_cursor(int position)
{
	PORTC = 0x80 + position;	// function set
	lcd_e();
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	6c f4       	brge	.+26     	; 0xd8 <wait+0x20>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	e9 ef       	ldi	r30, 0xF9	; 249
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <wait+0xe>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <wait+0x14>
  cc:	00 00       	nop
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	82 17       	cp	r24, r18
  d4:	93 07       	cpc	r25, r19
  d6:	a9 f7       	brne	.-22     	; 0xc2 <wait+0xa>
  d8:	08 95       	ret

000000da <lcd_e>:
  da:	ab 9a       	sbi	0x15, 3	; 21
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	eb df       	rcall	.-42     	; 0xb8 <wait>
  e2:	ab 98       	cbi	0x15, 3	; 21
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	e7 cf       	rjmp	.-50     	; 0xb8 <wait>
  ea:	08 95       	ret

000000ec <lcd_write_char>:
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	85 b3       	in	r24, 0x15	; 21
  f6:	8c 60       	ori	r24, 0x0C	; 12
  f8:	85 bb       	out	0x15, r24	; 21
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	dc df       	rcall	.-72     	; 0xb8 <wait>
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	85 bb       	out	0x15, r24	; 21
 104:	20 e1       	ldi	r18, 0x10	; 16
 106:	c2 9f       	mul	r28, r18
 108:	c0 01       	movw	r24, r0
 10a:	11 24       	eor	r1, r1
 10c:	85 bb       	out	0x15, r24	; 21
 10e:	85 b3       	in	r24, 0x15	; 21
 110:	8c 60       	ori	r24, 0x0C	; 12
 112:	85 bb       	out	0x15, r24	; 21
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	cf df       	rcall	.-98     	; 0xb8 <wait>
 11a:	15 ba       	out	0x15, r1	; 21
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <display_text>:
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	ec 01       	movw	r28, r24
 126:	88 81       	ld	r24, Y
 128:	88 23       	and	r24, r24
 12a:	31 f0       	breq	.+12     	; 0x138 <display_text+0x18>
 12c:	21 96       	adiw	r28, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	dd df       	rcall	.-70     	; 0xec <lcd_write_char>
 132:	89 91       	ld	r24, Y+
 134:	81 11       	cpse	r24, r1
 136:	fb cf       	rjmp	.-10     	; 0x12e <display_text+0xe>
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <init>:
}

void init()
{
 13e:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 144:	15 ba       	out	0x15, r1	; 21

	// function set
	PORTC = 0x20;	
 146:	c0 e2       	ldi	r28, 0x20	; 32
 148:	c5 bb       	out	0x15, r28	; 21
	lcd_e();
 14a:	c7 df       	rcall	.-114    	; 0xda <lcd_e>

	// function set
	PORTC = 0x20;   
	lcd_e();
 14c:	c5 bb       	out	0x15, r28	; 21
 14e:	c5 df       	rcall	.-118    	; 0xda <lcd_e>
	PORTC = 0x80;
 150:	80 e8       	ldi	r24, 0x80	; 128
	lcd_e();
 152:	85 bb       	out	0x15, r24	; 21

	// Display on/off control
	PORTC = 0x00;   
 154:	c2 df       	rcall	.-124    	; 0xda <lcd_e>
	lcd_e();
 156:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
 158:	c0 df       	rcall	.-128    	; 0xda <lcd_e>
	lcd_e();
 15a:	80 ef       	ldi	r24, 0xF0	; 240
	
	// clear screen
	PORTC = 0x00;   // Display on/off control
 15c:	85 bb       	out	0x15, r24	; 21
	lcd_e();
 15e:	bd df       	rcall	.-134    	; 0xda <lcd_e>
	PORTC = 0x01;	// function set
 160:	15 ba       	out	0x15, r1	; 21
	lcd_e();
 162:	bb df       	rcall	.-138    	; 0xda <lcd_e>
 164:	81 e0       	ldi	r24, 0x01	; 1

	// Entry mode set
	PORTC = 0x00;   
 166:	85 bb       	out	0x15, r24	; 21
	lcd_e();
 168:	b8 df       	rcall	.-144    	; 0xda <lcd_e>
 16a:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60;
 16c:	b6 df       	rcall	.-148    	; 0xda <lcd_e>
 16e:	80 e6       	ldi	r24, 0x60	; 96
	lcd_e();
 170:	85 bb       	out	0x15, r24	; 21
 172:	b3 df       	rcall	.-154    	; 0xda <lcd_e>
}
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <main>:


int main(void)
{
	// Init I/O
	DDRD = 0xFF;			// PORTD(7) output, PORTD(6:0) input
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	81 bb       	out	0x11, r24	; 17

	// Init LCD
	init();
 17c:	e0 df       	rcall	.-64     	; 0x13e <init>

	// Write sample string
	display_text("MS-DOS");
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	ce df       	rcall	.-100    	; 0x120 <display_text>

	// Loop forever
	while (1)
	{
		PORTD ^= (1<<7);	// Toggle PORTD.7
 184:	82 b3       	in	r24, 0x12	; 18
 186:	80 58       	subi	r24, 0x80	; 128
 188:	82 bb       	out	0x12, r24	; 18
		wait(250);	
 18a:	8a ef       	ldi	r24, 0xFA	; 250
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	94 df       	rcall	.-216    	; 0xb8 <wait>
 190:	f9 cf       	rjmp	.-14     	; 0x184 <main+0xc>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
