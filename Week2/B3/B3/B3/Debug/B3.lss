
B3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000933  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000084e  00000000  00000000  00000bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b7  00000000  00000000  0000140d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000017c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042d  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000294  00000000  00000000  00001c35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001ec9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	5b c0       	rjmp	.+182    	; 0xbc <__bad_interrupt>
   6:	00 00       	nop
   8:	59 c0       	rjmp	.+178    	; 0xbc <__bad_interrupt>
   a:	00 00       	nop
   c:	57 c0       	rjmp	.+174    	; 0xbc <__bad_interrupt>
   e:	00 00       	nop
  10:	55 c0       	rjmp	.+170    	; 0xbc <__bad_interrupt>
  12:	00 00       	nop
  14:	53 c0       	rjmp	.+166    	; 0xbc <__bad_interrupt>
  16:	00 00       	nop
  18:	51 c0       	rjmp	.+162    	; 0xbc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4f c0       	rjmp	.+158    	; 0xbc <__bad_interrupt>
  1e:	00 00       	nop
  20:	4d c0       	rjmp	.+154    	; 0xbc <__bad_interrupt>
  22:	00 00       	nop
  24:	4b c0       	rjmp	.+150    	; 0xbc <__bad_interrupt>
  26:	00 00       	nop
  28:	49 c0       	rjmp	.+146    	; 0xbc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	47 c0       	rjmp	.+142    	; 0xbc <__bad_interrupt>
  2e:	00 00       	nop
  30:	45 c0       	rjmp	.+138    	; 0xbc <__bad_interrupt>
  32:	00 00       	nop
  34:	43 c0       	rjmp	.+134    	; 0xbc <__bad_interrupt>
  36:	00 00       	nop
  38:	41 c0       	rjmp	.+130    	; 0xbc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3f c0       	rjmp	.+126    	; 0xbc <__bad_interrupt>
  3e:	00 00       	nop
  40:	3d c0       	rjmp	.+122    	; 0xbc <__bad_interrupt>
  42:	00 00       	nop
  44:	3b c0       	rjmp	.+118    	; 0xbc <__bad_interrupt>
  46:	00 00       	nop
  48:	39 c0       	rjmp	.+114    	; 0xbc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	37 c0       	rjmp	.+110    	; 0xbc <__bad_interrupt>
  4e:	00 00       	nop
  50:	35 c0       	rjmp	.+106    	; 0xbc <__bad_interrupt>
  52:	00 00       	nop
  54:	33 c0       	rjmp	.+102    	; 0xbc <__bad_interrupt>
  56:	00 00       	nop
  58:	31 c0       	rjmp	.+98     	; 0xbc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2f c0       	rjmp	.+94     	; 0xbc <__bad_interrupt>
  5e:	00 00       	nop
  60:	2d c0       	rjmp	.+90     	; 0xbc <__bad_interrupt>
  62:	00 00       	nop
  64:	2b c0       	rjmp	.+86     	; 0xbc <__bad_interrupt>
  66:	00 00       	nop
  68:	29 c0       	rjmp	.+82     	; 0xbc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	27 c0       	rjmp	.+78     	; 0xbc <__bad_interrupt>
  6e:	00 00       	nop
  70:	25 c0       	rjmp	.+74     	; 0xbc <__bad_interrupt>
  72:	00 00       	nop
  74:	23 c0       	rjmp	.+70     	; 0xbc <__bad_interrupt>
  76:	00 00       	nop
  78:	21 c0       	rjmp	.+66     	; 0xbc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1f c0       	rjmp	.+62     	; 0xbc <__bad_interrupt>
  7e:	00 00       	nop
  80:	1d c0       	rjmp	.+58     	; 0xbc <__bad_interrupt>
  82:	00 00       	nop
  84:	1b c0       	rjmp	.+54     	; 0xbc <__bad_interrupt>
  86:	00 00       	nop
  88:	19 c0       	rjmp	.+50     	; 0xbc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	77 00       	.word	0x0077	; ????
  8e:	7a 00       	.word	0x007a	; ????
  90:	7d 00       	.word	0x007d	; ????
  92:	80 00       	.word	0x0080	; ????
  94:	83 00       	.word	0x0083	; ????
  96:	86 00       	.word	0x0086	; ????
  98:	89 00       	.word	0x0089	; ????
  9a:	8c 00       	.word	0x008c	; ????
  9c:	8f 00       	.word	0x008f	; ????
  9e:	92 00       	.word	0x0092	; ????
  a0:	95 00       	.word	0x0095	; ????
  a2:	98 00       	.word	0x0098	; ????
  a4:	9b 00       	.word	0x009b	; ????
  a6:	9e 00       	.word	0x009e	; ????
  a8:	a1 00       	.word	0x00a1	; ????
  aa:	a4 00       	.word	0x00a4	; ????

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e1       	ldi	r29, 0x10	; 16
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	4d d0       	rcall	.+154    	; 0x154 <main>
  ba:	6d c0       	rjmp	.+218    	; 0x196 <_exit>

000000bc <__bad_interrupt>:
  bc:	a1 cf       	rjmp	.-190    	; 0x0 <__vectors>

000000be <wait>:
#define f  0b10011100
#define error 0b10111110

void wait( int ms )
{
	for (int i=0; i<ms; i++)
  be:	18 16       	cp	r1, r24
  c0:	19 06       	cpc	r1, r25
  c2:	6c f4       	brge	.+26     	; 0xde <wait+0x20>
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	e9 ef       	ldi	r30, 0xF9	; 249
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <wait+0xe>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <wait+0x14>
  d2:	00 00       	nop
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
  d8:	82 17       	cp	r24, r18
  da:	93 07       	cpc	r25, r19
  dc:	a9 f7       	brne	.-22     	; 0xc8 <wait+0xa>
  de:	08 95       	ret

000000e0 <display>:
		_delay_ms( 1 );
	}
}

void display(int digit){
	switch(digit){
  e0:	80 31       	cpi	r24, 0x10	; 16
  e2:	91 05       	cpc	r25, r1
  e4:	a0 f5       	brcc	.+104    	; 0x14e <display+0x6e>
  e6:	fc 01       	movw	r30, r24
  e8:	ea 5b       	subi	r30, 0xBA	; 186
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	4b c0       	rjmp	.+150    	; 0x184 <__tablejump2__>
		case 0:
			PORTC = zero;
  ee:	8e e7       	ldi	r24, 0x7E	; 126
  f0:	85 bb       	out	0x15, r24	; 21
			break;
  f2:	08 95       	ret
		case 1:
			PORTC = one;
  f4:	80 e6       	ldi	r24, 0x60	; 96
  f6:	85 bb       	out	0x15, r24	; 21
			break;
  f8:	08 95       	ret
		case 2:
			PORTC = two;
  fa:	86 eb       	ldi	r24, 0xB6	; 182
  fc:	85 bb       	out	0x15, r24	; 21
			break;
  fe:	08 95       	ret
		case 3:
			PORTC = three;
 100:	82 ef       	ldi	r24, 0xF2	; 242
 102:	85 bb       	out	0x15, r24	; 21
			break;
 104:	08 95       	ret
		case 4:
			PORTC = four;
 106:	88 ee       	ldi	r24, 0xE8	; 232
 108:	85 bb       	out	0x15, r24	; 21
			break;
 10a:	08 95       	ret
		case 5:
			PORTC = five;
 10c:	8a ed       	ldi	r24, 0xDA	; 218
 10e:	85 bb       	out	0x15, r24	; 21
			break;
 110:	08 95       	ret
		case 6:
			PORTC = six;
 112:	8e ed       	ldi	r24, 0xDE	; 222
 114:	85 bb       	out	0x15, r24	; 21
			break;
 116:	08 95       	ret
		case 7:
			PORTC = seven;
 118:	80 e7       	ldi	r24, 0x70	; 112
 11a:	85 bb       	out	0x15, r24	; 21
			break;
 11c:	08 95       	ret
		case 8:
			PORTC = eight;
 11e:	8e ef       	ldi	r24, 0xFE	; 254
 120:	85 bb       	out	0x15, r24	; 21
			break;
 122:	08 95       	ret
		case 9:
			PORTC = nine;
 124:	8a ef       	ldi	r24, 0xFA	; 250
 126:	85 bb       	out	0x15, r24	; 21
			break;
 128:	08 95       	ret
		case 10:
			PORTC = a;
 12a:	8c ef       	ldi	r24, 0xFC	; 252
 12c:	85 bb       	out	0x15, r24	; 21
			break;
 12e:	08 95       	ret
		case 11:
			PORTC = b;
 130:	8e ec       	ldi	r24, 0xCE	; 206
 132:	85 bb       	out	0x15, r24	; 21
			break;
 134:	08 95       	ret
		case 12:
			PORTC = c;
 136:	8e e1       	ldi	r24, 0x1E	; 30
 138:	85 bb       	out	0x15, r24	; 21
			break;
 13a:	08 95       	ret
		case 13:
			PORTC = d;
 13c:	86 ee       	ldi	r24, 0xE6	; 230
 13e:	85 bb       	out	0x15, r24	; 21
			break;
 140:	08 95       	ret
		case 14:
			PORTC = e;
 142:	8e e9       	ldi	r24, 0x9E	; 158
 144:	85 bb       	out	0x15, r24	; 21
			break;
 146:	08 95       	ret
		case 15:
			PORTC = f;
 148:	8c e9       	ldi	r24, 0x9C	; 156
 14a:	85 bb       	out	0x15, r24	; 21
			break;
 14c:	08 95       	ret
		default:
		PORTC = error;
 14e:	8e eb       	ldi	r24, 0xBE	; 190
 150:	85 bb       	out	0x15, r24	; 21
 152:	08 95       	ret

00000154 <main>:
}

int main(void)
{
	/* Replace with your application code */
	DDRC = 0xFF;
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00;
 158:	11 ba       	out	0x11, r1	; 17
	
	int count = 0;
 15a:	c0 e0       	ldi	r28, 0x00	; 0
 15c:	d0 e0       	ldi	r29, 0x00	; 0
	
	
	while (1)
	{
		if(PIND & 0x01){
 15e:	80 9b       	sbis	0x10, 0	; 16
 160:	02 c0       	rjmp	.+4      	; 0x166 <main+0x12>
			count++;
 162:	21 96       	adiw	r28, 0x01	; 1
 164:	09 c0       	rjmp	.+18     	; 0x178 <main+0x24>
		}else if(PIND & 0x02){
 166:	81 9b       	sbis	0x10, 1	; 16
 168:	02 c0       	rjmp	.+4      	; 0x16e <main+0x1a>
			count--;
 16a:	21 97       	sbiw	r28, 0x01	; 1
 16c:	05 c0       	rjmp	.+10     	; 0x178 <main+0x24>
		}else if (PIND & 0x03) {
 16e:	80 b3       	in	r24, 0x10	; 16
 170:	83 70       	andi	r24, 0x03	; 3
 172:	11 f0       	breq	.+4      	; 0x178 <main+0x24>
			count = 0;
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	d0 e0       	ldi	r29, 0x00	; 0
		}
		display(count);
 178:	ce 01       	movw	r24, r28
 17a:	b2 df       	rcall	.-156    	; 0xe0 <display>
		wait(200);
 17c:	88 ec       	ldi	r24, 0xC8	; 200
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	9e df       	rcall	.-196    	; 0xbe <wait>
	}
 182:	ed cf       	rjmp	.-38     	; 0x15e <main+0xa>

00000184 <__tablejump2__>:
 184:	ee 0f       	add	r30, r30
 186:	ff 1f       	adc	r31, r31
 188:	00 24       	eor	r0, r0
 18a:	00 1c       	adc	r0, r0
 18c:	0b be       	out	0x3b, r0	; 59
 18e:	07 90       	elpm	r0, Z+
 190:	f6 91       	elpm	r31, Z
 192:	e0 2d       	mov	r30, r0
 194:	09 94       	ijmp

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
