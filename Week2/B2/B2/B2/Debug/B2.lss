
B2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b1  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079e  00000000  00000000  00000bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f0  00000000  00000000  0000136f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00001660  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fb  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000224  00000000  00000000  00001b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001d93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__vector_1>
   6:	00 00       	nop
   8:	76 c0       	rjmp	.+236    	; 0xf6 <__vector_2>
   a:	00 00       	nop
   c:	a0 c0       	rjmp	.+320    	; 0x14e <__vector_3>
   e:	00 00       	nop
  10:	ca c0       	rjmp	.+404    	; 0x1a6 <__vector_4>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	b2 d0       	rcall	.+356    	; 0x1fe <main>
  9a:	be c0       	rjmp	.+380    	; 0x218 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>


ISR( INT0_vect )
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	2f 93       	push	r18
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	00 d0       	rcall	.+0      	; 0xb4 <__vector_1+0x16>
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
	volatile int count = 0;
  b8:	1a 82       	std	Y+2, r1	; 0x02
  ba:	19 82       	std	Y+1, r1	; 0x01
	while(count < 10000){count++;}
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	9a 81       	ldd	r25, Y+2	; 0x02
  c0:	80 31       	cpi	r24, 0x10	; 16
  c2:	97 42       	sbci	r25, 0x27	; 39
  c4:	54 f4       	brge	.+20     	; 0xda <__vector_1+0x3c>
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	9a 81       	ldd	r25, Y+2	; 0x02
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	9a 83       	std	Y+2, r25	; 0x02
  ce:	89 83       	std	Y+1, r24	; 0x01
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	9a 81       	ldd	r25, Y+2	; 0x02
  d4:	80 31       	cpi	r24, 0x10	; 16
  d6:	97 42       	sbci	r25, 0x27	; 39
  d8:	b4 f3       	brlt	.-20     	; 0xc6 <__vector_1+0x28>
	PORTD = 1 << 1;
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	82 bb       	out	0x12, r24	; 18
}
  de:	0f 90       	pop	r0
  e0:	0f 90       	pop	r0
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	2f 91       	pop	r18
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <__vector_2>:

ISR( INT1_vect )
{	
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	00 d0       	rcall	.+0      	; 0x10c <__vector_2+0x16>
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
	volatile int count = 0;
 110:	1a 82       	std	Y+2, r1	; 0x02
 112:	19 82       	std	Y+1, r1	; 0x01
	while(count < 10000){count++;}
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	9a 81       	ldd	r25, Y+2	; 0x02
 118:	80 31       	cpi	r24, 0x10	; 16
 11a:	97 42       	sbci	r25, 0x27	; 39
 11c:	54 f4       	brge	.+20     	; 0x132 <__vector_2+0x3c>
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	9a 81       	ldd	r25, Y+2	; 0x02
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	9a 83       	std	Y+2, r25	; 0x02
 126:	89 83       	std	Y+1, r24	; 0x01
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	9a 81       	ldd	r25, Y+2	; 0x02
 12c:	80 31       	cpi	r24, 0x10	; 16
 12e:	97 42       	sbci	r25, 0x27	; 39
 130:	b4 f3       	brlt	.-20     	; 0x11e <__vector_2+0x28>
	PORTD = 1 << 2;
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	82 bb       	out	0x12, r24	; 18
}
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	2f 91       	pop	r18
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <__vector_3>:
ISR( INT2_vect )
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	00 d0       	rcall	.+0      	; 0x164 <__vector_3+0x16>
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
	volatile int count = 0;
 168:	1a 82       	std	Y+2, r1	; 0x02
 16a:	19 82       	std	Y+1, r1	; 0x01
	while(count < 10000){count++;}
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	9a 81       	ldd	r25, Y+2	; 0x02
 170:	80 31       	cpi	r24, 0x10	; 16
 172:	97 42       	sbci	r25, 0x27	; 39
 174:	54 f4       	brge	.+20     	; 0x18a <__vector_3+0x3c>
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	9a 81       	ldd	r25, Y+2	; 0x02
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	9a 83       	std	Y+2, r25	; 0x02
 17e:	89 83       	std	Y+1, r24	; 0x01
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	9a 81       	ldd	r25, Y+2	; 0x02
 184:	80 31       	cpi	r24, 0x10	; 16
 186:	97 42       	sbci	r25, 0x27	; 39
 188:	b4 f3       	brlt	.-20     	; 0x176 <__vector_3+0x28>
	PORTD = 1 << 3;
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	82 bb       	out	0x12, r24	; 18
}
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	2f 91       	pop	r18
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <__vector_4>:

ISR( INT3_vect )
{	
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <__vector_4+0x16>
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
	volatile int count = 0;
 1c0:	1a 82       	std	Y+2, r1	; 0x02
 1c2:	19 82       	std	Y+1, r1	; 0x01
	while(count < 10000){count++;}
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	9a 81       	ldd	r25, Y+2	; 0x02
 1c8:	80 31       	cpi	r24, 0x10	; 16
 1ca:	97 42       	sbci	r25, 0x27	; 39
 1cc:	54 f4       	brge	.+20     	; 0x1e2 <__vector_4+0x3c>
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	9a 81       	ldd	r25, Y+2	; 0x02
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	9a 83       	std	Y+2, r25	; 0x02
 1d6:	89 83       	std	Y+1, r24	; 0x01
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	9a 81       	ldd	r25, Y+2	; 0x02
 1dc:	80 31       	cpi	r24, 0x10	; 16
 1de:	97 42       	sbci	r25, 0x27	; 39
 1e0:	b4 f3       	brlt	.-20     	; 0x1ce <__vector_4+0x28>
	PORTD = 1;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	82 bb       	out	0x12, r24	; 18
}
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	2f 91       	pop	r18
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <main>:

int main( void )
{
	// Init I/O
	DDRD = 0xFF;			// PORTD(7:3) output, PORTD(2:0) input	0b11111100
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	81 bb       	out	0x11, r24	; 17

	// Init Interrupt hardware
	EICRA |= 0xFF;			// INT1 falling edge, INT0 rising edge  0b00001011
 202:	ea e6       	ldi	r30, 0x6A	; 106
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	90 81       	ld	r25, Z
 208:	80 83       	st	Z, r24
	EIMSK |= 0x0F;			// Enable INT1 & INT0					0b00000011
 20a:	89 b7       	in	r24, 0x39	; 57
 20c:	8f 60       	ori	r24, 0x0F	; 15
 20e:	89 bf       	out	0x39, r24	; 57
	
	// Enable global interrupt system
	//SREG = 0x80;			// Of direct via SREG of via wrapper
	PORTD = 0x01;	
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	82 bb       	out	0x12, r24	; 18
	sei();	
 214:	78 94       	sei
 216:	ff cf       	rjmp	.-2      	; 0x216 <main+0x18>

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
