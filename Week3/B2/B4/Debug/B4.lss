
B4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001a0  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000236  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be1  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a5  00000000  00000000  00000f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c1  00000000  00000000  000018c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b5  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001cf  00000000  00000000  0000244d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000261c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	88 c0       	rjmp	.+272    	; 0x13a <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ea       	ldi	r30, 0xA0	; 160
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5c d0       	rcall	.+184    	; 0x17c <main>
  c4:	6b c0       	rjmp	.+214    	; 0x19c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <functions_wait>:
 */ 
#include <util/delay.h>

void functions_wait( int ms )
{
	for (int i=0; i<ms; i++)
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	6c f4       	brge	.+26     	; 0xe8 <functions_wait+0x20>
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	e9 ef       	ldi	r30, 0xF9	; 249
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <functions_wait+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <functions_wait+0x14>
  dc:	00 00       	nop
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	82 17       	cp	r24, r18
  e4:	93 07       	cpc	r25, r19
  e6:	a9 f7       	brne	.-22     	; 0xd2 <functions_wait+0xa>
  e8:	08 95       	ret

000000ea <lcd_e>:
{
	PORTC = 0x00;
	lcd_e();
	PORTC = 0x80 + position;	// function set
	lcd_e();
}
  ea:	ab 9a       	sbi	0x15, 3	; 21
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	eb df       	rcall	.-42     	; 0xc8 <functions_wait>
  f2:	ab 98       	cbi	0x15, 3	; 21
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	e7 cf       	rjmp	.-50     	; 0xc8 <functions_wait>
  fa:	08 95       	ret

000000fc <lcd_clear>:
  fc:	15 ba       	out	0x15, r1	; 21
  fe:	f5 df       	rcall	.-22     	; 0xea <lcd_e>
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	85 bb       	out	0x15, r24	; 21
 104:	f2 cf       	rjmp	.-28     	; 0xea <lcd_e>
 106:	08 95       	ret

00000108 <lcd_init>:

void lcd_init()
{
 108:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 10e:	15 ba       	out	0x15, r1	; 21

	// function set
	PORTC = 0x20;
 110:	c0 e2       	ldi	r28, 0x20	; 32
 112:	c5 bb       	out	0x15, r28	; 21
	lcd_e();
 114:	ea df       	rcall	.-44     	; 0xea <lcd_e>

	// function set
	PORTC = 0x20;
	lcd_e();
 116:	c5 bb       	out	0x15, r28	; 21
 118:	e8 df       	rcall	.-48     	; 0xea <lcd_e>
	PORTC = 0x80;
 11a:	80 e8       	ldi	r24, 0x80	; 128
	lcd_e();
 11c:	85 bb       	out	0x15, r24	; 21

	// Display on/off control
	PORTC = 0x00;
 11e:	e5 df       	rcall	.-54     	; 0xea <lcd_e>
	lcd_e();
 120:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
 122:	e3 df       	rcall	.-58     	; 0xea <lcd_e>
	lcd_e();
 124:	80 ef       	ldi	r24, 0xF0	; 240
 126:	85 bb       	out	0x15, r24	; 21
	
	lcd_clear();
 128:	e0 df       	rcall	.-64     	; 0xea <lcd_e>

	// Entry mode set
	PORTC = 0x00;
 12a:	e8 df       	rcall	.-48     	; 0xfc <lcd_clear>
	lcd_e();
 12c:	15 ba       	out	0x15, r1	; 21
 12e:	dd df       	rcall	.-70     	; 0xea <lcd_e>
	PORTC = 0x60;
 130:	80 e6       	ldi	r24, 0x60	; 96
 132:	85 bb       	out	0x15, r24	; 21
	lcd_e();
 134:	da df       	rcall	.-76     	; 0xea <lcd_e>
 136:	cf 91       	pop	r28
}
 138:	08 95       	ret

0000013a <__vector_10>:
int CompareValue = 0x0F;

// Interrupt routine timer2 overflow
//
ISR( TIMER2_OVF_vect )
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
	value++; // Increment counter
 148:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 14c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 156:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <setupTimer>:


void setupTimer()
{
	OCR2 = CompareValue; // Compare value of counter 2
 168:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16c:	83 bd       	out	0x23, r24	; 35
	TIMSK |= 1<<7; // T2 compare match interrupt enable
 16e:	87 b7       	in	r24, 0x37	; 55
 170:	80 68       	ori	r24, 0x80	; 128
 172:	87 bf       	out	0x37, r24	; 55
	TCCR2 = 0b00011111; // Initialize T2: ext.counting, rising edge
 174:	8f e1       	ldi	r24, 0x1F	; 31
 176:	85 bd       	out	0x25, r24	; 37
	// compare output mode, CTC, RUN
	sei(); // turn_on intr all
 178:	78 94       	sei
 17a:	08 95       	ret

0000017c <main>:
}

int main(void)
{
	//STEP 1 LCD
	lcd_init();	// Init LCD
 17c:	c5 df       	rcall	.-118    	; 0x108 <lcd_init>

	//set 2 COUNTER
	DDRD &= ~(1<<7); // set PORTD.7 for input
 17e:	8f 98       	cbi	0x11, 7	; 17
	DDRA = 0xFF; // set PORTB for output (shows countregister)
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF; // set PORTC for output (shows tenth value)
	setupTimer();
 184:	87 bb       	out	0x17, r24	; 23
 186:	f0 df       	rcall	.-32     	; 0x168 <setupTimer>

	// Loop forever
	while (1)
	{
		PORTA = TCNT2; // show value counter 2
		PORTB = value; // show value tenth counter
 188:	c2 e0       	ldi	r28, 0x02	; 2
 18a:	d1 e0       	ldi	r29, 0x01	; 1
	setupTimer();

	// Loop forever
	while (1)
	{
		PORTA = TCNT2; // show value counter 2
 18c:	84 b5       	in	r24, 0x24	; 36
 18e:	8b bb       	out	0x1b, r24	; 27
		PORTB = value; // show value tenth counter
 190:	88 81       	ld	r24, Y
 192:	88 bb       	out	0x18, r24	; 24
		
		functions_wait(1000); // every 10 ms
 194:	88 ee       	ldi	r24, 0xE8	; 232
 196:	93 e0       	ldi	r25, 0x03	; 3
 198:	97 df       	rcall	.-210    	; 0xc8 <functions_wait>
 19a:	f8 cf       	rjmp	.-16     	; 0x18c <main+0x10>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
