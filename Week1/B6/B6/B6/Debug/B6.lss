
B6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098e  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000867  00000000  00000000  00000ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ed  00000000  00000000  0000140d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000018fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006fd3  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ad  00000000  00000000  00008923  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000089d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000228  00000000  00000000  000089f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	27 d0       	rcall	.+78     	; 0xe8 <main>
  9a:	3e c0       	rjmp	.+124    	; 0x118 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
#include <util/delay.h>
#include <stdbool.h>

void wait( int ms )
{
	for (int i=0; i<ms; i++)
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	e9 ef       	ldi	r30, 0xF9	; 249
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <blink4Hz>:
	}
}

void blink4Hz()
{
	PORTD = 0x80;
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	82 bb       	out	0x12, r24	; 18
	wait(250);
  c4:	8a ef       	ldi	r24, 0xFA	; 250
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	ea df       	rcall	.-44     	; 0x9e <wait>
	PORTD = 0x00;
  ca:	12 ba       	out	0x12, r1	; 18
	wait(250);
  cc:	8a ef       	ldi	r24, 0xFA	; 250
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	e6 cf       	rjmp	.-52     	; 0x9e <wait>
  d2:	08 95       	ret

000000d4 <blink1Hz>:
}

void blink1Hz()
{
	PORTD = 0x80;
  d4:	80 e8       	ldi	r24, 0x80	; 128
  d6:	82 bb       	out	0x12, r24	; 18
	wait(1000);
  d8:	88 ee       	ldi	r24, 0xE8	; 232
  da:	93 e0       	ldi	r25, 0x03	; 3
  dc:	e0 df       	rcall	.-64     	; 0x9e <wait>
	PORTD = 0x00;
  de:	12 ba       	out	0x12, r1	; 18
	wait(1000);
  e0:	88 ee       	ldi	r24, 0xE8	; 232
  e2:	93 e0       	ldi	r25, 0x03	; 3
  e4:	dc cf       	rjmp	.-72     	; 0x9e <wait>
  e6:	08 95       	ret

000000e8 <main>:
}

int main (void)
{
	DDRD = 0xFF;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	81 bb       	out	0x11, r24	; 17
	bool isDefaultState = true;
  ec:	c1 e0       	ldi	r28, 0x01	; 1
		isDefaultState ? blink1Hz() : blink4Hz();
			
		if ((PINC & 0xFF) && isDefaultState == true)
		{
			isDefaultState = false;
		} else if ((PINC & 0xFF) && isDefaultState == false) {
  ee:	d1 e0       	ldi	r29, 0x01	; 1
	{
		isDefaultState ? blink1Hz() : blink4Hz();
			
		if ((PINC & 0xFF) && isDefaultState == true)
		{
			isDefaultState = false;
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <main+0xe>
  f4:	c1 2f       	mov	r28, r17
	DDRD = 0xFF;
	bool isDefaultState = true;
	
	while (1==1)
	{
		isDefaultState ? blink1Hz() : blink4Hz();
  f6:	cc 23       	and	r28, r28
  f8:	29 f0       	breq	.+10     	; 0x104 <main+0x1c>
  fa:	ec df       	rcall	.-40     	; 0xd4 <blink1Hz>
			
		if ((PINC & 0xFF) && isDefaultState == true)
  fc:	83 b3       	in	r24, 0x13	; 19
  fe:	81 11       	cpse	r24, r1
 100:	04 c0       	rjmp	.+8      	; 0x10a <main+0x22>
	DDRD = 0xFF;
	bool isDefaultState = true;
	
	while (1==1)
	{
		isDefaultState ? blink1Hz() : blink4Hz();
 102:	05 c0       	rjmp	.+10     	; 0x10e <main+0x26>
 104:	dd df       	rcall	.-70     	; 0xc0 <blink4Hz>
			
		if ((PINC & 0xFF) && isDefaultState == true)
 106:	83 b3       	in	r24, 0x13	; 19
 108:	02 c0       	rjmp	.+4      	; 0x10e <main+0x26>
 10a:	c1 11       	cpse	r28, r1
 10c:	f3 cf       	rjmp	.-26     	; 0xf4 <main+0xc>
		{
			isDefaultState = false;
		} else if ((PINC & 0xFF) && isDefaultState == false) {
 10e:	83 b3       	in	r24, 0x13	; 19
 110:	88 23       	and	r24, r24
 112:	89 f3       	breq	.-30     	; 0xf6 <main+0xe>
 114:	cd 2f       	mov	r28, r29
 116:	ef cf       	rjmp	.-34     	; 0xf6 <main+0xe>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
